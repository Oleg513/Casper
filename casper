import os
import asyncio
import random
from datetime import datetime
import openai
from telegram import Bot

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–ª—é—á—ñ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
openai.api_key = os.getenv("OPENAI_API_KEY")
telegram_bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=telegram_bot_token)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram
async def bot_send_message(chat_id, message):
    await bot.send_message(chat_id=chat_id, text=message)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å —Ç—Ä–∏–≥–µ—Ä–Ω—ñ —Å–ª–æ–≤–∞
def should_respond(message):
    trigger_words = ["–±–æ—Ç", "GPT", "–¥—Ä—É–≥"]
    return any(word in message.lower() for word in trigger_words)

# –õ–æ–≥—ñ–∫–∞ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è–º
def is_question(message):
    return "?" in message

# –§—É–Ω–∫—Ü—ñ—è –≤–∏–±–æ—Ä—É –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –Ω–∞–±–æ—Ä—É
responses = [
    "–ù—É —â–æ, –¥—Ä—É–∑—ñ, —è–∫ –Ω–∞—Å—Ç—Ä—ñ–π? üòâ",
    "–ß–æ–≥–æ –º–æ–≤—á–∏—Ç–µ, –º–æ–∂–µ –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏?",
    "–ü–∏—Ç–∞–Ω–Ω—è –Ω–µ —Ç–µ—Ä–ø–∏—Ç—å –∑–≤–æ–ª—ñ–∫–∞–Ω—å! –î–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å?",
    "–ó–∞–≤–∂–¥–∏ —Ç—É—Ç, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ—Å—å –ø—ñ–¥–∫–∞–∑–∞—Ç–∏!"
]

def get_personal_response():
    return random.choice(responses)

# –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
last_message_time = None

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—É–∑–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
async def check_inactivity(chat_id):
    global last_message_time
    while True:
        if last_message_time and (asyncio.get_event_loop().time() - last_message_time > 180):  # –ü–∞—É–∑–∞ –≤ 3 —Ö–≤–∏–ª–∏–Ω–∏
            await bot_send_message(chat_id, "–©–æ —Å–∫–∞–∂–µ—à? –ó–∞–±—É–ª–∏ –ø—Ä–æ –º–µ–Ω–µ? üòâ")
            last_message_time = None
        await asyncio.sleep(10)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥

# –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(chat_id, message):
    global last_message_time
    last_message_time = asyncio.get_event_loop().time()  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    
    if should_respond(message):
        response = get_personal_response()
        await bot_send_message(chat_id, response)
    elif is_question(message) and random.random() > 0.5:  # 50% —à–∞–Ω—Å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        await bot_send_message(chat_id, "–û, –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ñ! –î–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –ª—é–¥–∏?")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def main(chat_id):
    asyncio.create_task(check_inactivity(chat_id))
    await start_message_listener(chat_id, handle_message)  # –Ü–º—ñ—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

# –Ü–º—ñ—Ç–∞—Ü—ñ—è –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
async def start_message_listener(chat_id, callback):
    test_messages = [
        "–ü—Ä–∏–≤—ñ—Ç, –±–æ—Ç!",
        "–ß–æ–≥–æ –º–æ–≤—á–∏—Ç–µ, –ª—é–¥–∏?",
        "–û–π, —É –º–µ–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è?",
        "–•—Ç–æ—Å—å —Ç—É—Ç —â–µ —î?",
        "–¢–∏ –¥–µ, –¥—Ä—É–≥?",
    ]
    for msg in test_messages:
        await callback(chat_id, msg)
        await asyncio.sleep(2)

# –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
chat_id = "YOUR_CHAT_ID"  # –í–∫–∞–∂–∏ —Ç—É—Ç —Å–≤—ñ–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —á–∞—Ç—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
asyncio.run(main(chat_id))
