import os
import logging
import asyncio
from telegram import Bot, Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, ConversationHandler
from dotenv import load_dotenv
import openai
from typing import List

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è API —Ç–∞ —á–∞—Ç–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
CHAT_IDS = [123456789, -987654321]  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ —á–∏—Å–ª–æ–≤—ñ chat ID

# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª–∏ —ñ—Å–Ω—É—é—Ç—å
PROMPTS_FILE = 'prompts.json'
HEROES_TANKS_FILE = 'heroes_tanks.json'

if not os.path.exists(PROMPTS_FILE):
    logger.error(f"–§–∞–π–ª {PROMPTS_FILE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
if not os.path.exists(HEROES_TANKS_FILE):
    logger.error(f"–§–∞–π–ª {HEROES_TANKS_FILE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è OpenAI
openai.api_key = OPENAI_API_KEY

async def fetch_fact():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç –≤—ñ–¥ OpenAI GPT-4."""
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": "–†–æ–∑–∫–∞–∂–∏ —Ü—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç"}],
            max_tokens=100
        )
        fact = response.choices[0].message['content']
        logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Ñ–∞–∫—Ç –≤—ñ–¥ OpenAI")
        return fact
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ OpenAI API: {e}")
        return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–∫—Ç –∑–∞—Ä–∞–∑."

async def send_fact_to_chats(chat_ids: List[int]):
    """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–∞–∫—Ç —É –≤–∫–∞–∑–∞–Ω—ñ —á–∞—Ç–∏."""
    fact = await fetch_fact()
    for chat_id in chat_ids:
        try:
            await bot.send_message(chat_id=chat_id, text=fact)
            logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–æ —á–∞—Ç—É {chat_id}")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–æ —á–∞—Ç—É {chat_id}: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    try:
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("Bot", callback_data='bot')],
            [InlineKeyboardButton("–ü—Ä–∏–≤—ñ—Ç", callback_data='privit')]
        ])
        await update.message.reply_text("üîç –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
        logger.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–Ω—ñ—Ü—ñ—é–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /start")
    except telegram.error.BadRequest as e:
        logger.error(f"BadRequest: {e}")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫."""
    logger.error(msg="–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞:", exc_info=context.error)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞."""
    global bot
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
    start_handler = CommandHandler('start', start)
    application.add_handler(start_handler)

    # –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞
    await application.initialize()
    await application.start()

    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–∞–∫—Ç—ñ–≤ –∫–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏
    async def periodic_fact_sender():
        while True:
            await send_fact_to_chats(CHAT_IDS)
            await asyncio.sleep(2 * 60 * 60)  # –ö–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏

    application.create_task(periodic_fact_sender())

    await application.updater.stop()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.critical(f"–ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
