import os
import json
import logging
from enum import Enum, auto
from langdetect import detect
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
import aiohttp
from dotenv import load_dotenv
from typing import List

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Enum –¥–ª—è –∫—Ä–∞—â–æ—ó –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó
class States(Enum):
    MAIN_MENU = auto()
    CHARACTERS_MENU = auto()
    GUIDES_MENU = auto()
    TOURNAMENTS_MENU = auto()
    UPDATES_MENU = auto()
    BEGINNER_MENU = auto()
    NEWS_MENU = auto()
    HELP_MENU = auto()
    QUIZZES_MENU = auto()
    SEARCH_PERFORMING = auto()
    SEARCH_HERO_GUIDES = auto()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è OpenAI API
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
API_URL = "https://api.openai.com/v1/chat/completions"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—ñ–≤
def load_json_data(file_path: str):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)
            if not data:
                raise ValueError("JSON —Ñ–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π.")
            return data
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª {file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return {}
    except json.JSONDecodeError as e:
        logger.error(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π JSON –≤ —Ñ–∞–π–ª—ñ {file_path}: {e}")
        return {}
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª {file_path}: {e}")
        return {}

prompts_data = load_json_data('prompts.json')
heroes_data = load_json_data('heroes_tanks.json')
prompts_list = prompts_data.get('prompts', [])

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–∏—Ö –≥–µ—Ä–æ—ó–≤ (–º–æ–∂–µ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)
selected_heroes = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–Ω—ñ—Ü—ñ—é–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /start")
    buttons = [
        [KeyboardButton("üßô‚Äç‚ôÇÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ"), KeyboardButton("üìö –ì–∞–π–¥–∏"), KeyboardButton("üèÜ –¢—É—Ä–Ω—ñ—Ä–∏")],
        [KeyboardButton("üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è"), KeyboardButton("üÜì –ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å"), KeyboardButton("üîç –ü–æ—à—É–∫")],
        [KeyboardButton("üì∞ –ù–æ–≤–∏–Ω–∏"), KeyboardButton("üí° –î–æ–ø–æ–º–æ–≥–∞"), KeyboardButton("üéÆ –í—ñ–∫—Ç–æ—Ä–∏–Ω–∏")]
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("üîç –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
    return States.MAIN_MENU

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    logger.info(f"–í–∏–±—ñ—Ä –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é: {user_input}")
    
    if user_input == "üßô‚Äç‚ôÇÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ":
        buttons = [
            [KeyboardButton("üìù –î–µ—Ç–∞–ª—ñ –ø—Ä–æ –≥–µ—Ä–æ—ó–≤"), KeyboardButton("üß© –í–≥–∞–¥–∞–π –≥–µ—Ä–æ—è")],
            [KeyboardButton("‚öîÔ∏è –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≥–µ—Ä–æ—ó–≤"), KeyboardButton("üéØ –ö–æ–Ω—Ç—Ä–≥–µ—Ä–æ—ó")],
            [KeyboardButton("üóÇ –°–ø–∏—Å–æ–∫ –≥–µ—Ä–æ—ó–≤"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text("üßô‚Äç‚ôÇÔ∏è –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
        return States.CHARACTERS_MENU
    elif user_input == "üìö –ì–∞–π–¥–∏":
        buttons = [
            [KeyboardButton("üìù –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É"), KeyboardButton("üí° –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")],
            [KeyboardButton("üé• –í—ñ–¥–µ–æ-–≥–∞–π–¥–∏"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text("üìö –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
        return States.GUIDES_MENU
    elif user_input == "üèÜ –¢—É—Ä–Ω—ñ—Ä–∏":
        buttons = [
            [KeyboardButton("üìÖ –ú–∞–π–±—É—Ç–Ω—ñ —Ç—É—Ä–Ω—ñ—Ä–∏"), KeyboardButton("üìù –£—á–∞—Å—Ç—å —É —Ç—É—Ä–Ω—ñ—Ä—ñ")],
            [KeyboardButton("üìä –û–≥–ª—è–¥ —Ç—É—Ä–Ω—ñ—Ä—ñ–≤"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text("üèÜ –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
        return States.TOURNAMENTS_MENU
    elif user_input == "üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è":
        buttons = [
            [KeyboardButton("üìù –û—Å—Ç–∞–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∏"), KeyboardButton("üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")],
            [KeyboardButton("üé§ –Ü–Ω—Ç–µ—Ä–≤'—é –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º–∏"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text("üîÑ –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
        return States.UPDATES_MENU
    elif user_input == "üÜì –ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å":
        buttons = [
            [KeyboardButton("üìò –ì–∞–π–¥–∏ –¥–ª—è –Ω–æ–≤–∞—á–∫—ñ–≤"), KeyboardButton("üéØ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –Ω–∞–≤—á–∞–ª—å–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è")],
            [KeyboardButton("üìà –ü–æ—Ä–∞–¥–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—É"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text("üÜì –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
        return States.BEGINNER_MENU
    elif user_input == "üîç –ü–æ—à—É–∫":
        buttons = [
            [KeyboardButton("üîç –ü–æ—à—É–∫ –≥–µ—Ä–æ—ó–≤ —Ç–∞ –≥–∞–π–¥—ñ–≤"), KeyboardButton("üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–∏–π –ø–æ—à—É–∫")],
            [KeyboardButton("üìù –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—à—É–∫—É"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text("üîç –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
        return States.NEWS_MENU  # –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–∫—Ä–µ–º–∏–π —Å—Ç–∞–Ω –¥–ª—è –ø–æ—à—É–∫—É
    elif user_input == "üì∞ –ù–æ–≤–∏–Ω–∏":
        buttons = [
            [KeyboardButton("üìù –û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –≥—Ä–∏"), KeyboardButton("üìä –ê–Ω–∞–ª—ñ–∑ –ø–∞—Ç—á—ñ–≤")],
            [KeyboardButton("üéâ –ü–æ–¥—ñ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text("üì∞ –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
        return States.NEWS_MENU
    elif user_input == "üí° –î–æ–ø–æ–º–æ–≥–∞":
        buttons = [
            [KeyboardButton("‚ùì FAQ"), KeyboardButton("üí¨ –ñ–∏–≤–∏–π —á–∞—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏")],
            [KeyboardButton("üêû –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text("üí° –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
        return States.HELP_MENU
    elif user_input == "üéÆ –í—ñ–∫—Ç–æ—Ä–∏–Ω–∏":
        buttons = [
            [KeyboardButton("üß† –í–≥–∞–¥–∞–π —Ü–∏—Ç–∞—Ç—É"), KeyboardButton("üí• –í–≥–∞–¥–∞–π –∑–¥—ñ–±–Ω—ñ—Å—Ç—å")],
            [KeyboardButton("üìö –¢–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–Ω—è"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text("üéÆ –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
        return States.QUIZZES_MENU
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç.")
        return ConversationHandler.END

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ OpenAI API
async def handle_gpt_query(update: Update, context: ContextTypes.DEFAULT_TYPE, user_input: str) -> None:
    try:
        data = {
            "model": "gpt-4",
            "messages": [{"role": "user", "content": user_input}],
            "max_tokens": 1200
        }
        headers = {
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "Content-Type": "application/json"
        }
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –¥–æ OpenAI API –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º: {user_input}")
        async with aiohttp.ClientSession() as session:
            async with session.post(API_URL, headers=headers, json=data) as response:
                if response.status == 200:
                    response_data = await response.json()
                    reply_text = response_data['choices'][0]['message']['content']
                    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ OpenAI API: {reply_text}")
                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ Markdown —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
                    await update.message.reply_text(f"{reply_text}", parse_mode='Markdown')
                else:
                    error_text = await response.text()
                    logger.error(f"API Error: {response.status} - {error_text}")
                    await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ API. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø—ñ–¥–º–µ–Ω—é –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤
async def handle_characters_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    logger.info(f"–í–∏–±—ñ—Ä –≤ –ü–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö: {user_input}")
    
    if user_input == "üìù –î–µ—Ç–∞–ª—ñ –ø—Ä–æ –≥–µ—Ä–æ—ó–≤":
        await send_character_details(update, context)
        return States.CHARACTERS_MENU
    elif user_input == "üß© –í–≥–∞–¥–∞–π –≥–µ—Ä–æ—è":
        await start_quiz_quote(update, context)
        return States.CHARACTERS_MENU
    elif user_input == "‚öîÔ∏è –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≥–µ—Ä–æ—ó–≤":
        await send_character_comparison(update, context)
        return States.CHARACTERS_MENU
    elif user_input == "üéØ –ö–æ–Ω—Ç—Ä–≥–µ—Ä–æ—ó":
        await send_counter_strategies(update, context)
        return States.CHARACTERS_MENU
    elif user_input == "üóÇ –°–ø–∏—Å–æ–∫ –≥–µ—Ä–æ—ó–≤":
        await select_hero_class(update, context)
        return States.CHARACTERS_MENU
    elif user_input == "üîô –ù–∞–∑–∞–¥":
        await start(update, context)
        return States.MAIN_MENU
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç.")
        return States.CHARACTERS_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ –≥–µ—Ä–æ—ó–≤
async def send_character_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü—Ä–∏–∫–ª–∞–¥: –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∞–±–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —ó—Ö –∫—Ä–∞—â–µ
    character_details = "üìñ **–î–µ—Ç–∞–ª—ñ –ø—Ä–æ –≥–µ—Ä–æ—è:**\n\n" \
                        "<b>–Ü–º'—è:</b> –î–∂–æ–Ω—Å–æ–Ω\n" \
                        "<b>–ö–ª–∞—Å:</b> –¢–∞–Ω–∫–∏\n" \
                        "<b>–û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–≤–∏—á–∫–∏:</b> –ù–∞–≤–∏—á–∫–∞ 1, –ù–∞–≤–∏—á–∫–∞ 2, –ù–∞–≤–∏—á–∫–∞ 3\n\n" \
                        "üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://example.com/johnson-details"  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ñ–∞–∫—Ç–∏—á–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    await update.message.reply_text(character_details, parse_mode='HTML', disable_web_page_preview=True)
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—Ç–∞–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≥–µ—Ä–æ—ó–≤
async def send_character_comparison(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    comparison = "‚öîÔ∏è **–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≥–µ—Ä–æ—ó–≤:**\n\n" \
                 "<b>–î–∂–æ–Ω—Å–æ–Ω:</b> HP: 2000, –ê—Ç–∞–∫–∞: 150, –ó–∞—Ö–∏—Å—Ç: 300\n" \
                 "<b>–§—Ä—ñ–¥–æ–º:</b> HP: 1800, –ê—Ç–∞–∫–∞: 170, –ó–∞—Ö–∏—Å—Ç: 250\n\n" \
                 "üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://example.com/comparison"
    await update.message.reply_text(comparison, parse_mode='HTML', disable_web_page_preview=True)
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—Ç–∞–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π –∫–æ–Ω—Ç—Ä–≥–µ—Ä–æ—ó–≤
async def send_counter_strategies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    strategies = "üéØ **–ö–æ–Ω—Ç—Ä–≥–µ—Ä–æ—ó:**\n\n" \
                 "‚Ä¢ –î–ª—è –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏ –î–∂–æ–Ω—Å–æ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ú—É–Ω—É.\n" \
                 "‚Ä¢ –î–ª—è –§—Ä—ñ–¥–æ–º–∞ –Ω–∞–π–∫—Ä–∞—â–µ –ø—ñ–¥—ñ–π–¥—É—Ç—å –ê–Ω–Ω—ñ.\n\n" \
                 "üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://example.com/counter-strategies"
    await update.message.reply_text(strategies, parse_mode='HTML', disable_web_page_preview=True)
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—Ç–∞–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—É –≥–µ—Ä–æ—è –ø–µ—Ä–µ–¥ –≤–∏–±–æ—Ä–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–µ—Ä–æ—è
async def select_hero_class(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    classes = ["–¢–∞–Ω–∫", "–ë–æ—Ä–µ—Ü—å", "–ú–∞–≥", "–°—Ç—Ä—ñ–ª–µ—Ü—å", "–ê—Å–∞—Å–∏–Ω", "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞"]
    buttons = []
    for i in range(0, len(classes), 3):
        row = classes[i:i + 3]
        buttons.append([KeyboardButton(cls) for cls in row])
    buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("üóÇ **–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –≥–µ—Ä–æ—è:**", parse_mode='Markdown', reply_markup=reply_markup)
    return States.CHARACTERS_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—É –≥–µ—Ä–æ—è
async def handle_characters_class_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    selected_class = update.message.text.strip()
    classes = ["–¢–∞–Ω–∫", "–ë–æ—Ä–µ—Ü—å", "–ú–∞–≥", "–°—Ç—Ä—ñ–ª–µ—Ü—å", "–ê—Å–∞—Å–∏–Ω", "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞"]
    if selected_class in classes:
        heroes = get_characters_by_class(selected_class)
        if heroes:
            buttons = []
            for i in range(0, len(heroes), 4):
                row = heroes[i:i + 4]
                buttons.append([KeyboardButton(hero) for hero in row])
            buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
            reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
            await update.message.reply_text(f"üóÇ **–°–ø–∏—Å–æ–∫ –≥–µ—Ä–æ—ó–≤ –∫–ª–∞—Å—É {selected_class}:**", parse_mode='Markdown', reply_markup=reply_markup)
            return States.CHARACTERS_MENU
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–º–∞—î –≥–µ—Ä–æ—ó–≤ —É –∫–ª–∞—Å—ñ {selected_class}.")
            await select_hero_class(update, context)
            return States.CHARACTERS_MENU
    elif selected_class == "üîô –ù–∞–∑–∞–¥":
        await handle_characters_sub_selection(update, context, "üóÇ –°–ø–∏—Å–æ–∫ –≥–µ—Ä–æ—ó–≤")
        return States.CHARACTERS_MENU
    else:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–±—Ä–∞–Ω–∞ –æ–ø—Ü—ñ—è –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∂–æ–¥–Ω–æ–º—É –∫–ª–∞—Å—É.")
        await select_hero_class(update, context)
        return States.CHARACTERS_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≥–µ—Ä–æ—ó–≤ –∑–∞ –∫–ª–∞—Å–æ–º
def get_characters_by_class(hero_class: str) -> List[str]:
    return [
        hero["name"] for hero in heroes_data.get('heroes', [])
        if hero_class.lower() in hero.get("role", "").lower()
    ]

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –≥–µ—Ä–æ—ó–≤ (–±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ –∫–ª–∞—Å—É)
async def handle_characters_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    selected_hero = update.message.text.strip()
    if selected_hero in [hero["name"] for hero in heroes_data.get('heroes', [])]:
        hero_info = get_hero_info(selected_hero)
        if hero_info:
            hero_details = (
                f"üìñ **–î–µ—Ç–∞–ª—ñ –ø—Ä–æ –≥–µ—Ä–æ—è {selected_hero}:**\n\n"
                f"<b>–ö–ª–∞—Å:</b> {hero_info.get('class', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                f"<b>–†–æ–ª—å:</b> {hero_info.get('role', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                f"<b>HP:</b> {hero_info.get('hp', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                f"<b>–ê—Ç–∞–∫–∞:</b> {hero_info.get('attack', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                f"<b>–ó–∞—Ö–∏—Å—Ç:</b> {hero_info.get('defense', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n\n"
                f"üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: {hero_info.get('details_link', '–ù–µ–º–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è')}"
            )
            await update.message.reply_text(hero_details, parse_mode='HTML', disable_web_page_preview=True)
            # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—É –≥–µ—Ä–æ—ó–≤
            await select_hero_class(update, context)
            return States.CHARACTERS_MENU
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü—å–æ–≥–æ –≥–µ—Ä–æ—è.")
            return States.CHARACTERS_MENU
    elif selected_hero == "üîô –ù–∞–∑–∞–¥":
        await select_hero_class(update, context)
        return States.CHARACTERS_MENU
    else:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–±—Ä–∞–Ω–∞ –æ–ø—Ü—ñ—è –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∂–æ–¥–Ω–æ–º—É –≥–µ—Ä–æ—é.")
        await select_hero_class(update, context)
        return States.CHARACTERS_MENU

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø—ñ–¥–º–µ–Ω—é –ì–∞–π–¥—ñ–≤
async def handle_guides_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    logger.info(f"–í–∏–±—ñ—Ä –≤ –ì–∞–π–¥–∞—Ö: {user_input}")
    
    if user_input == "üìù –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É":
        await send_class_strategies(update, context)
        return States.GUIDES_MENU
    elif user_input == "üí° –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó":
        await send_interactive_recommendations(update, context)
        return States.GUIDES_MENU
    elif user_input == "üé• –í—ñ–¥–µ–æ-–≥–∞–π–¥–∏":
        await send_video_guides(update, context)
        return States.GUIDES_MENU
    elif user_input == "üîô –ù–∞–∑–∞–¥":
        await start(update, context)
        return States.MAIN_MENU
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç.")
        return States.GUIDES_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É
async def send_class_strategies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    strategies = "üìù **–°—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É:**\n\n" \
                "<b>–¢–∞–Ω–∫–∏:</b> –§–æ–∫—É—Å—É–π—Ç–µ—Å—è –Ω–∞ –∑–∞—Ö–∏—Å—Ç—ñ —Ç–∞ —ñ–Ω—ñ—Ü—ñ—é–≤–∞–Ω–Ω—ñ –±–æ—ó–≤.\n" \
                "<b>–ë—ñ–π—Ü—ñ:</b> –ê—Ç–∞–∫—É–π—Ç–µ –≤–æ—Ä–æ–≥—ñ–≤ —Ç–∞ —É—Ç—Ä–∏–º—É–π—Ç–µ –ø–æ–∑–∏—Ü—ñ—ó.\n" \
                "<b>–ú–∞–≥–∏:</b> –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≤–∏—Å–æ–∫–∏–π —É—Ä–æ–Ω —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å.\n" \
                "<b>–°—Ç—Ä—ñ–ª–µ—Ü—ñ:</b> –ó–∞–±–µ–∑–ø–µ—á—É–π—Ç–µ –ø–æ—Å—Ç—ñ–π–Ω—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É –∑ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó.\n" \
                "<b>–ê—Å–∞—Å–∏–Ω–∏:</b> –ó–∞–≤–¥–∞–≤–∞–π—Ç–µ —à–≤–∏–¥–∫–∏–π —É—Ä–æ–Ω —Ç–∞ –∑–Ω–∏–∫–∞–π—Ç–µ.\n" \
                "<b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞:</b> –î–æ–ø–æ–º–∞–≥–∞–π—Ç–µ —Å–æ—é–∑–Ω–∏–∫–∞–º —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é–π—Ç–µ –ø–æ–ª–µ –±–æ—é.\n\n" \
                "üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://example.com/class-strategies"
    await update.message.reply_text(strategies, parse_mode='HTML', disable_web_page_preview=True)
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –≥–∞–π–¥—ñ–≤ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—Ç–∞–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
async def send_interactive_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    classes = ["–¢–∞–Ω–∫", "–ë–æ—Ä–µ—Ü—å", "–ú–∞–≥", "–°—Ç—Ä—ñ–ª–µ—Ü—å", "–ê—Å–∞—Å–∏–Ω", "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞"]
    buttons = []
    for i in range(0, len(classes), 3):
        row = classes[i:i + 3]
        buttons.append([KeyboardButton(cls) for cls in row])
    buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("üí° **–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≥–∞–π–¥—ñ–≤:**", parse_mode='Markdown', reply_markup=reply_markup)
    return States.GUIDES_MENU

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—É –¥–ª—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
async def handle_interactive_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    selected_class = update.message.text.strip()
    classes = ["–¢–∞–Ω–∫", "–ë–æ—Ä–µ—Ü—å", "–ú–∞–≥", "–°—Ç—Ä—ñ–ª–µ—Ü—å", "–ê—Å–∞—Å–∏–Ω", "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞"]
    if selected_class in classes:
        recommendations = f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≥–∞–π–¥—ñ–≤ –¥–ª—è –∫–ª–∞—Å—É {selected_class}:**\n\n" \
                           f"‚Ä¢ [–ì–∞–π–¥ –¥–ª—è {selected_class} 1](https://example.com/guide-{selected_class.lower()}-1)\n" \
                           f"‚Ä¢ [–ì–∞–π–¥ –¥–ª—è {selected_class} 2](https://example.com/guide-{selected_class.lower()}-2)\n\n" \
                           f"üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://example.com/recommendations-{selected_class.lower()}"
        await update.message.reply_text(recommendations, parse_mode='Markdown', disable_web_page_preview=True)
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
        buttons = []
        for i in range(0, len(classes), 3):
            row = classes[i:i + 3]
            buttons.append([KeyboardButton(cls) for cls in row])
        buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text("üí° **–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≥–∞–π–¥—ñ–≤:**", parse_mode='Markdown', reply_markup=reply_markup)
        return States.GUIDES_MENU
    elif selected_class == "üîô –ù–∞–∑–∞–¥":
        buttons = [
            [KeyboardButton("üìù –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É"), KeyboardButton("üí° –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")],
            [KeyboardButton("üé• –í—ñ–¥–µ–æ-–≥–∞–π–¥–∏"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text("üìö –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
        return States.GUIDES_MENU
    else:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–±—Ä–∞–Ω–∞ –æ–ø—Ü—ñ—è –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∂–æ–¥–Ω–æ–º—É –∫–ª–∞—Å—É.")
        return States.GUIDES_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–µ–æ-–≥–∞–π–¥—ñ–≤
async def send_video_guides(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    video_guides = "üé• **–í—ñ–¥–µ–æ-–≥–∞–π–¥–∏:**\n\n" \
                  "‚Ä¢ [–ì–∞–π–¥ –¥–ª—è –Ω–æ–≤–∞—á–∫—ñ–≤](https://youtube.com/guide1)\n" \
                  "‚Ä¢ [–°—Ç—Ä–∞—Ç–µ–≥—ñ—ó –≥—Ä–∏](https://youtube.com/guide2)\n" \
                  "‚Ä¢ [–ü–æ—Ä–∞–¥–∏ –≤—ñ–¥ –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–≤](https://youtube.com/guide3)\n\n" \
                  "üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://example.com/video-guides"
    await update.message.reply_text(video_guides, parse_mode='Markdown', disable_web_page_preview=True)
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –≥–∞–π–¥—ñ–≤ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—Ç–∞–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø—ñ–¥–º–µ–Ω—é –¢—É—Ä–Ω—ñ—Ä—ñ–≤
async def handle_tournaments_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    logger.info(f"–í–∏–±—ñ—Ä –≤ –¢—É—Ä–Ω—ñ—Ä–∞—Ö: {user_input}")
    
    if user_input == "üìÖ –ú–∞–π–±—É—Ç–Ω—ñ —Ç—É—Ä–Ω—ñ—Ä–∏":
        await send_upcoming_tournaments(update, context)
        return States.TOURNAMENTS_MENU
    elif user_input == "üìù –£—á–∞—Å—Ç—å —É —Ç—É—Ä–Ω—ñ—Ä—ñ":
        await send_tournament_participation(update, context)
        return States.TOURNAMENTS_MENU
    elif user_input == "üìä –û–≥–ª—è–¥ —Ç—É—Ä–Ω—ñ—Ä—ñ–≤":
        await send_tournaments_overview(update, context)
        return States.TOURNAMENTS_MENU
    elif user_input == "üîô –ù–∞–∑–∞–¥":
        await start(update, context)
        return States.MAIN_MENU
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç.")
        return States.TOURNAMENTS_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –º–∞–π–±—É—Ç–Ω—ñ —Ç—É—Ä–Ω—ñ—Ä–∏
async def send_upcoming_tournaments(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    upcoming = "üìÖ **–ú–∞–π–±—É—Ç–Ω—ñ —Ç—É—Ä–Ω—ñ—Ä–∏:**\n\n" \
               "‚Ä¢ **–¢—É—Ä–Ω—ñ—Ä Spring Clash**\n" \
               "  üóì –î–∞—Ç–∞: 25 –∫–≤—ñ—Ç–Ω—è 2024\n" \
               "  üèÜ –ü—Ä–∏–∑–∏: $5000\n" \
               "  üîó –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: https://example.com/spring-clash\n\n" \
               "‚Ä¢ **–õ—ñ—Ç–Ω—ñ–π –ö—É–±–æ–∫**\n" \
               "  üóì –î–∞—Ç–∞: 15 –ª–∏–ø–Ω—è 2024\n" \
               "  üèÜ –ü—Ä–∏–∑–∏: $7000\n" \
               "  üîó –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: https://example.com/summer-cup"
    await update.message.reply_text(upcoming, parse_mode='Markdown', disable_web_page_preview=True)
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é —Ç—É—Ä–Ω—ñ—Ä—ñ–≤ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—Ç–∞–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —É—á–∞—Å—Ç—å —É —Ç—É—Ä–Ω—ñ—Ä—ñ
async def send_tournament_participation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    participation = "üìù **–£—á–∞—Å—Ç—å —É —Ç—É—Ä–Ω—ñ—Ä—ñ:**\n\n" \
                    "–©–æ–± –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É —Ç—É—Ä–Ω—ñ—Ä—ñ, –≤–∏–∫–æ–Ω–∞–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:\n" \
                    "1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.\n" \
                    "2. –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ.\n" \
                    "3. –î–æ—á–µ–∫–∞–π—Ç–µ—Å—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∞—à–æ—ó —É—á–∞—Å—Ç—ñ.\n\n" \
                    "üîó –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: https://example.com/participate-tournament"
    await update.message.reply_text(participation, parse_mode='Markdown', disable_web_page_preview=True)
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é —Ç—É—Ä–Ω—ñ—Ä—ñ–≤ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—Ç–∞–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –æ–≥–ª—è–¥—É —Ç—É—Ä–Ω—ñ—Ä—ñ–≤
async def send_tournaments_overview(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    overview = "üìä **–û–≥–ª—è–¥ —Ç—É—Ä–Ω—ñ—Ä—ñ–≤:**\n\n" \
               "‚Ä¢ **Spring Clash:** –í—ñ–¥–±—É–≤—Å—è 20 –±–µ—Ä–µ–∑–Ω—è 2024. –ü–µ—Ä–µ–º–æ–∂—Ü—ñ –æ—Ç—Ä–∏–º–∞–ª–∏ $5000.\n" \
               "‚Ä¢ **Winter Showdown:** –í—ñ–¥–±—É–≤—Å—è 10 —Å—ñ—á–Ω—è 2024. –ü–µ—Ä–µ–º–æ–∂—Ü—ñ –æ—Ç—Ä–∏–º–∞–ª–∏ $3000.\n\n" \
               "üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://example.com/tournaments-overview"
    await update.message.reply_text(overview, parse_mode='Markdown', disable_web_page_preview=True)
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é —Ç—É—Ä–Ω—ñ—Ä—ñ–≤ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—Ç–∞–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø—ñ–¥–º–µ–Ω—é –û–Ω–æ–≤–ª–µ–Ω—å
async def handle_updates_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    logger.info(f"–í–∏–±—ñ—Ä –≤ –û–Ω–æ–≤–ª–µ–Ω–Ω—è—Ö: {user_input}")
    
    if user_input == "üìù –û—Å—Ç–∞–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∏":
        await send_latest_updates(update, context)
        return States.UPDATES_MENU
    elif user_input == "üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è":
        await send_update_notifications(update, context)
        return States.UPDATES_MENU
    elif user_input == "üé§ –Ü–Ω—Ç–µ—Ä–≤'—é –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º–∏":
        await send_developer_interviews(update, context)
        return States.UPDATES_MENU
    elif user_input == "üîô –ù–∞–∑–∞–¥":
        await start(update, context)
        return States.MAIN_MENU
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç.")
        return States.UPDATES_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –æ–Ω–æ–≤–ª–µ–Ω—å –≥—Ä–∏
async def send_latest_updates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    latest = "üìù **–û—Å—Ç–∞–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∏:**\n\n" \
             "‚Ä¢ **–í–µ—Ä—Å—ñ—è 1.2.3:** –î–æ–¥–∞–Ω–æ –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è - –ê—Ä—Ç–µ–º—ñ—É—Å.\n" \
             "‚Ä¢ **–ë–∞–ª–∞–Ω—Å:** –ó–º—ñ–Ω–µ–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–µ—è–∫–∏—Ö –≥–µ—Ä–æ—ó–≤ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –≥—Ä–∏.\n" \
             "‚Ä¢ **–ù–æ–≤—ñ –∫–∞—Ä—Ç–∏:** –í–≤–µ–¥–µ–Ω–æ –∫–∞—Ä—Ç—É '–ó–∞–º–æ–∫ –í–æ–≥–Ω—é'.\n\n" \
             "üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://example.com/latest-updates"
    await update.message.reply_text(latest, parse_mode='HTML', disable_web_page_preview=True)
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –æ–Ω–æ–≤–ª–µ–Ω—å –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—Ç–∞–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
async def send_update_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    notifications = "üîî **–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:**\n\n" \
                    "–ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è, —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞–π–Ω–æ–≤—ñ—à—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∏ —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø–æ–¥—ñ—ó.\n\n" \
                    "üîó –ü—ñ–¥–ø–∏—Å–∫–∞: https://example.com/subscribe-updates"
    await update.message.reply_text(notifications, parse_mode='Markdown', disable_web_page_preview=True)
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –æ–Ω–æ–≤–ª–µ–Ω—å –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—Ç–∞–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —ñ–Ω—Ç–µ—Ä–≤'—é –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º–∏
async def send_developer_interviews(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    interviews = "üé§ **–Ü–Ω—Ç–µ—Ä–≤'—é –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º–∏:**\n\n" \
                 "‚Ä¢ **–Ü–Ω—Ç–µ—Ä–≤'—é –∑ –≥–æ–ª–æ–≤–Ω–∏–º —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º:** –î—ñ–∑–Ω–∞–π—Ç–µ—Å—å –ø—Ä–æ –º–∞–π–±—É—Ç–Ω—ñ –ø–ª–∞–Ω–∏ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.\n" \
                 "‚Ä¢ **–Ü–Ω—Ç–µ—Ä–≤'—é –∑ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º:** –û–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –º–µ—Ö–∞–Ω—ñ–∫ —Ç–∞ –¥–∏–∑–∞–π–Ω—É –∫–∞—Ä—Ç.\n\n" \
                 "üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://example.com/developer-interviews"
    await update.message.reply_text(interviews, parse_mode='Markdown', disable_web_page_preview=True)
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –æ–Ω–æ–≤–ª–µ–Ω—å –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—Ç–∞–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø—ñ–¥–º–µ–Ω—é –î–æ–ø–æ–º–æ–≥–∏
async def handle_help_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    logger.info(f"–í–∏–±—ñ—Ä –≤ –î–æ–ø–æ–º–æ–∑—ñ: {user_input}")
    
    if user_input == "‚ùì FAQ":
        await send_faq(update, context)
        return States.HELP_MENU
    elif user_input == "üí¨ –ñ–∏–≤–∏–π —á–∞—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏":
        await send_live_support(update, context)
        return States.HELP_MENU
    elif user_input == "üêû –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏":
        await send_bug_report(update, context)
        return States.HELP_MENU
    elif user_input == "üîô –ù–∞–∑–∞–¥":
        await start(update, context)
        return States.MAIN_MENU
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç.")
        return States.HELP_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ FAQ
async def send_faq(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    faq = "‚ùì **FAQ:**\n\n" \
          "‚Ä¢ **–Ø–∫ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è?** –ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.\n" \
          "‚Ä¢ **–Ø–∫ –æ–±—Ä–∞—Ç–∏ –≥–µ—Ä–æ—è?** –í–∏–≤—á—ñ—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ—ó–≤ —É —Ä–æ–∑–¥—ñ–ª—ñ –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ.\n" \
          "‚Ä¢ **–©–æ —Ä–æ–±–∏—Ç–∏ –ø—Ä–∏ –±–∞–≥–∞—Ö?** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏.\n\n" \
          "üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://example.com/faq"
    await update.message.reply_text(faq, parse_mode='HTML', disable_web_page_preview=True)
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –¥–æ–ø–æ–º–æ–≥–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—Ç–∞–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∂–∏–≤–∏–π —á–∞—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
async def send_live_support(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    live_support = "üí¨ **–ñ–∏–≤–∏–π —á–∞—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:**\n\n" \
                   "–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∞–±–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –Ω–∞—à–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:\n\n" \
                   "üîó [–ü—ñ–¥—Ç—Ä–∏–º–∫–∞](https://t.me/your_support_chat)"
    await update.message.reply_text(live_support, parse_mode='HTML', disable_web_page_preview=True)
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –¥–æ–ø–æ–º–æ–≥–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—Ç–∞–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏
async def send_bug_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    bug_report = "üêû **–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏:**\n\n" \
                 "–Ø–∫—â–æ –≤–∏ –∑–Ω–∞–π—à–ª–∏ –±–∞–≥ –∞–±–æ –º–∞—î—Ç–µ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É —Ñ–æ—Ä–º—É:\n\n" \
                 "üîó [–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É](https://example.com/report-bug)"
    await update.message.reply_text(bug_report, parse_mode='HTML', disable_web_page_preview=True)
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –¥–æ–ø–æ–º–æ–≥–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—Ç–∞–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø—ñ–¥–º–µ–Ω—é –ù–æ–≤–∏–Ω
async def handle_news_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    logger.info(f"–í–∏–±—ñ—Ä –≤ –ù–æ–≤–∏–Ω–∞—Ö: {user_input}")
    
    if user_input == "üìù –û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –≥—Ä–∏":
        await send_latest_game_news(update, context)
        return States.NEWS_MENU
    elif user_input == "üìä –ê–Ω–∞–ª—ñ–∑ –ø–∞—Ç—á—ñ–≤":
        await send_patch_analysis(update, context)
        return States.NEWS_MENU
    elif user_input == "üéâ –ü–æ–¥—ñ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏":
        await send_community_events(update, context)
        return States.NEWS_MENU
    elif user_input == "üîô –ù–∞–∑–∞–¥":
        await start(update, context)
        return States.MAIN_MENU
    else:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É –ø–æ—à—É–∫—É
        if user_input in ["üîç –ü–æ—à—É–∫ –≥–µ—Ä–æ—ó–≤ —Ç–∞ –≥–∞–π–¥—ñ–≤", "üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–∏–π –ø–æ—à—É–∫", "üìù –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—à—É–∫—É"]:
            return await handle_search_menu(update, context)
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç.")
            return States.NEWS_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –Ω–æ–≤–∏–Ω –≥—Ä–∏
async def send_latest_game_news(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    news = "üìù **–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –≥—Ä–∏:**\n\n" \
           "‚Ä¢ **–ù–æ–≤–∏–π –≥–µ—Ä–æ–π –ê—Ä—Ç–µ–º—ñ—É—Å** –±—É–≤ –¥–æ–¥–∞–Ω–∏–π –¥–æ –≥—Ä–∏.\n" \
           "‚Ä¢ –ó–∞–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–æ –Ω–æ–≤—É –∫–∞—Ä—Ç—É '–ó–∞–º–æ–∫ –í–æ–≥–Ω—é'.\n" \
           "‚Ä¢ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –∫—ñ–ª—å–∫–∞ –±–∞–≥—ñ–≤ —Ç–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–æ –±–∞–ª–∞–Ω—Å.\n\n" \
           "üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://example.com/latest-news"
    await update.message.reply_text(news, parse_mode='HTML', disable_web_page_preview=True)
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –Ω–æ–≤–∏–Ω –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—Ç–∞–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª—ñ–∑—É –ø–∞—Ç—á—ñ–≤
async def send_patch_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    analysis = "üìä **–ê–Ω–∞–ª—ñ–∑ –ø–∞—Ç—á—ñ–≤:**\n\n" \
               "‚Ä¢ **–ü–∞—Ç—á 1.2.3:** –ó–º—ñ–Ω–∏ —É –±–∞–ª–∞–Ω—Å—ñ –≥–µ—Ä–æ—ó–≤.\n" \
               "‚Ä¢ **–ü–∞—Ç—á 1.2.4:** –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –º–µ—Ö–∞–Ω—ñ–∫ –≥—Ä–∏.\n\n" \
               "üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://example.com/patch-analysis"
    await update.message.reply_text(analysis, parse_mode='HTML', disable_web_page_preview=True)
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –ø–∞—Ç—á—ñ–≤ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—Ç–∞–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—ñ–π —Å–ø—ñ–ª—å–Ω–æ—Ç–∏
async def send_community_events(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    events = "üéâ **–ü–æ–¥—ñ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏:**\n\n" \
             "‚Ä¢ **–°–ø—ñ–ª—å–Ω–∏–π –º–∞—Ç—á**: –ó–±–∏—Ä–∞–π—Ç–µ—Å—å –∑ –¥—Ä—É–∑—è–º–∏ —Ç–∞ –±–µ—Ä—ñ—Ç—å —É—á–∞—Å—Ç—å —É —Å–ø—ñ–ª—å–Ω–∏—Ö –º–∞—Ç—á–∞—Ö.\n" \
             "‚Ä¢ **–§–∞–Ω-–∞—Ä—Ç –∫–æ–Ω–∫—É—Ä—Å**: –°—Ç–≤–æ—Ä—é–π—Ç–µ —Ç–∞ –¥—ñ–ª—è–π—Ç–µ—Å—å —Å–≤–æ—ó–º —Ñ–∞–Ω-–∞—Ä—Ç–æ–º –¥–ª—è —à–∞–Ω—Å—ñ–≤ –≤–∏–≥—Ä–∞—Ç–∏ –ø—Ä–∏–∑–∏.\n\n" \
             "üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://example.com/community-events"
    await update.message.reply_text(events, parse_mode='HTML', disable_web_page_preview=True)
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –ø–æ–¥—ñ–π —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—Ç–∞–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø—ñ–¥–º–µ–Ω—é –ü–æ—á–∞—Ç–∫—ñ–≤—Ü—è
async def handle_beginner_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    logger.info(f"–í–∏–±—ñ—Ä –≤ –ü–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ: {user_input}")
    
    if user_input == "üìò –ì–∞–π–¥–∏ –¥–ª—è –Ω–æ–≤–∞—á–∫—ñ–≤":
        await send_beginner_guides(update, context)
        return States.BEGINNER_MENU
    elif user_input == "üéØ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –Ω–∞–≤—á–∞–ª—å–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è":
        await send_interactive_tasks(update, context)
        return States.BEGINNER_MENU
    elif user_input == "üìà –ü–æ—Ä–∞–¥–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—É":
        await send_progress_tips(update, context)
        return States.BEGINNER_MENU
    elif user_input == "üîô –ù–∞–∑–∞–¥":
        await start(update, context)
        return States.MAIN_MENU
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç.")
        return States.BEGINNER_MENU

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≥–∞–π–¥—ñ–≤ –¥–ª—è –Ω–æ–≤–∞—á–∫—ñ–≤
async def send_beginner_guides(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    guides = "üìò **–ì–∞–π–¥–∏ –¥–ª—è –Ω–æ–≤–∞—á–∫—ñ–≤:**\n\n" \
             "‚Ä¢ [–ü–æ–≤–Ω–∏–π –≥–∞–π–¥ –¥–ª—è –Ω–æ–≤–∞—á–∫—ñ–≤](https://example.com/beginner-guide)\n" \
             "‚Ä¢ [–û—Å–Ω–æ–≤–∏ –≥—Ä–∏ —Ç–∞ –º–µ—Ö–∞–Ω—ñ–∫–∏](https://example.com/basics-guide)\n\n" \
             "üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://example.com/beginner-guides"
    await update.message.reply_text(guides, parse_mode='Markdown', disable_web_page_preview=True)
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—Ç–∞–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
async def send_interactive_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    tasks = "üéØ **–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –Ω–∞–≤—á–∞–ª—å–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:**\n\n" \
            "–í–∏–∫–æ–Ω–∞–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è, —â–æ–± –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–≤–æ—ó –Ω–∞–≤–∏—á–∫–∏:\n" \
            "1. **–ó–∞–≤–¥–∞–Ω–Ω—è 1:** –û–ø—Ç–∏–º—ñ–∑—É–π—Ç–µ —Å–≤—ñ–π –±–∞–ª–∞–Ω—Å.\n" \
            "2. **–ó–∞–≤–¥–∞–Ω–Ω—è 2:** –ü—ñ–¥–≤–∏—â—Ç–µ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Å–≤–æ—î—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó.\n\n" \
            "üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://example.com/interactive-tasks"
    await update.message.reply_text(tasks, parse_mode='Markdown', disable_web_page_preview=True)
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—Ç–∞–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ—Ä–∞–¥ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—É
async def send_progress_tips(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    tips = "üìà **–ü–æ—Ä–∞–¥–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—É:**\n\n" \
           "‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ.\n" \
           "‚Ä¢ –ê–Ω–∞–ª—ñ–∑—É–π—Ç–µ —Å–≤–æ—ó –º–∞—Ç—á—ñ.\n" \
           "‚Ä¢ –í–∏–≤—á–∞–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–≤.\n\n" \
           "üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://example.com/progress-tips"
    await update.message.reply_text(tips, parse_mode='Markdown', disable_web_page_preview=True)
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—Ç–∞–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø—ñ–¥–º–µ–Ω—é –í—ñ–∫—Ç–æ—Ä–∏–Ω
async def handle_quizzes_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    logger.info(f"–í–∏–±—ñ—Ä –≤ –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞—Ö: {user_input}")
    
    if user_input == "üß† –í–≥–∞–¥–∞–π —Ü–∏—Ç–∞—Ç—É":
        await start_quiz_quote(update, context)
        return States.QUIZZES_MENU
    elif user_input == "üí• –í–≥–∞–¥–∞–π –∑–¥—ñ–±–Ω—ñ—Å—Ç—å":
        await start_quiz_ability(update, context)
        return States.QUIZZES_MENU
    elif user_input == "üìö –¢–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–Ω—è":
        await start_quiz_test(update, context)
        return States.QUIZZES_MENU
    elif user_input == "üîô –ù–∞–∑–∞–¥":
        await start(update, context)
        return States.MAIN_MENU
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç.")
        return States.QUIZZES_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏ "–í–≥–∞–¥–∞–π —Ü–∏—Ç–∞—Ç—É"
async def start_quiz_quote(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    question = "üß† **–í–≥–∞–¥–∞–π –≥–µ—Ä–æ—è –∑–∞ —Ü—ñ—î—é —Ü–∏—Ç–∞—Ç–æ—é:**\n\n" \
               "\"–Ø –∑–∞–≤–∂–¥–∏ –Ω–∞ –±–æ—Ü—ñ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤.\""
    options = ["–î–∂–æ–Ω—Å–æ–Ω", "–§—Ä—ñ–¥–æ–º", "–õ—É–∫–∞—Å", "–ê–ª—ñ—Å–∞"]
    buttons = [[KeyboardButton(option) for option in options], [KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text(question, parse_mode='Markdown', reply_markup=reply_markup)
    return States.QUIZZES_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏ "–í–≥–∞–¥–∞–π —Ü–∏—Ç–∞—Ç—É"
async def handle_quizzes_quote(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_answer = update.message.text
    correct_answer = "–î–∂–æ–Ω—Å–æ–Ω"
    if user_answer == correct_answer:
        await update.message.reply_text("üéâ –í—ñ—Ä–Ω–æ! –¶–µ –î–∂–æ–Ω—Å–æ–Ω.")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–≤—ñ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_answer}")
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –í—ñ–∫—Ç–æ—Ä–∏–Ω
    buttons = [
        [KeyboardButton("üß† –í–≥–∞–¥–∞–π —Ü–∏—Ç–∞—Ç—É"), KeyboardButton("üí• –í–≥–∞–¥–∞–π –∑–¥—ñ–±–Ω—ñ—Å—Ç—å")],
        [KeyboardButton("üìö –¢–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–Ω—è"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("üéÆ –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", parse_mode='Markdown', reply_markup=reply_markup)
    return States.QUIZZES_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–∞—Ä—Ç—É –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏ "–í–≥–∞–¥–∞–π –∑–¥—ñ–±–Ω—ñ—Å—Ç—å"
async def start_quiz_ability(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    question = "üí• **–í–≥–∞–¥–∞–π –∑–¥—ñ–±–Ω—ñ—Å—Ç—å –≥–µ—Ä–æ—è:**\n\n" \
               "–Ø–∫–∞ –∑–¥—ñ–±–Ω—ñ—Å—Ç—å –¥–æ–∑–≤–æ–ª—è—î –≥–µ—Ä–æ—é —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –±–∞—Ä'—î—Ä–∏ –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É?"
    options = ["–ë–∞—Ä'—î—Ä", "–ó–∞–º–æ–∫", "–ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", "–©–∏—Ç"]
    buttons = [[KeyboardButton(option) for option in options], [KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text(question, parse_mode='Markdown', reply_markup=reply_markup)
    return States.QUIZZES_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏ "–í–≥–∞–¥–∞–π –∑–¥—ñ–±–Ω—ñ—Å—Ç—å"
async def handle_quizzes_ability(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_answer = update.message.text
    correct_answer = "–©–∏—Ç"
    if user_answer == correct_answer:
        await update.message.reply_text("üéâ –í—ñ—Ä–Ω–æ! –¶–µ –©–∏—Ç.")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–≤—ñ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_answer}")
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –í—ñ–∫—Ç–æ—Ä–∏–Ω
    buttons = [
        [KeyboardButton("üß† –í–≥–∞–¥–∞–π —Ü–∏—Ç–∞—Ç—É"), KeyboardButton("üí• –í–≥–∞–¥–∞–π –∑–¥—ñ–±–Ω—ñ—Å—Ç—å")],
        [KeyboardButton("üìö –¢–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–Ω—è"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("üéÆ –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", parse_mode='Markdown', reply_markup=reply_markup)
    return States.QUIZZES_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–∞—Ä—Ç—É —Ç–µ—Å—Ç—É –Ω–∞ –∑–Ω–∞–Ω–Ω—è
async def start_quiz_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    question = "üìö **–¢–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–Ω—è:**\n\n" \
               "–Ø–∫–∏–π –≥–µ—Ä–æ–π –º–∞—î –∑–¥—ñ–±–Ω—ñ—Å—Ç—å '–ü—Ä–æ–∫–ª—è—Ç—Ç—è –ù–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ—Å—Ç—ñ'?"
    options = ["–ì–µ—Ä–æ–π 1", "–ì–µ—Ä–æ–π 2", "–ì–µ—Ä–æ–π 3", "–ì–µ—Ä–æ–π 4"]
    buttons = [[KeyboardButton(option) for option in options], [KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text(question, parse_mode='Markdown', reply_markup=reply_markup)
    return States.QUIZZES_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —Ç–µ—Å—Ç—É –Ω–∞ –∑–Ω–∞–Ω–Ω—è
async def handle_quizzes_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_answer = update.message.text
    correct_answer = "–ì–µ—Ä–æ–π 3"
    if user_answer == correct_answer:
        await update.message.reply_text("üéâ –í—ñ—Ä–Ω–æ! –¶–µ –ì–µ—Ä–æ–π 3.")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–≤—ñ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_answer}")
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –í—ñ–∫—Ç–æ—Ä–∏–Ω
    buttons = [
        [KeyboardButton("üß† –í–≥–∞–¥–∞–π —Ü–∏—Ç–∞—Ç—É"), KeyboardButton("üí• –í–≥–∞–¥–∞–π –∑–¥—ñ–±–Ω—ñ—Å—Ç—å")],
        [KeyboardButton("üìö –¢–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–Ω—è"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("üéÆ –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", parse_mode='Markdown', reply_markup=reply_markup)
    return States.QUIZZES_MENU

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ—à—É–∫—É
async def handle_search_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    logger.info(f"–í–∏–±—ñ—Ä –≤ –ü–æ—à—É–∫—É: {user_input}")
    
    if user_input == "üîç –ü–æ—à—É–∫ –≥–µ—Ä–æ—ó–≤ —Ç–∞ –≥–∞–π–¥—ñ–≤":
        return await perform_search(update, context)
    elif user_input == "üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–∏–π –ø–æ—à—É–∫":
        await perform_voice_search(update, context)
        return States.NEWS_MENU
    elif user_input == "üìù –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—à—É–∫—É":
        await show_search_history(update, context)
        return States.NEWS_MENU
    elif user_input == "üîô –ù–∞–∑–∞–¥":
        await start(update, context)
        return States.MAIN_MENU
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç.")
        return States.NEWS_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—à—É–∫—É
async def perform_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("üîç –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É:")
    context.user_data['state'] = States.SEARCH_PERFORMING
    return States.SEARCH_PERFORMING

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ—à—É–∫—É
async def perform_voice_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–∏–π –ø–æ—à—É–∫ –Ω–∞—Ä–∞–∑—ñ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.")
    return States.NEWS_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ—à—É–∫—É
async def show_search_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    history = context.user_data.get('search_history', [])
    if history:
        history_text = "üìù **–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—à—É–∫—É:**\n\n" + "\n".join([f"{idx+1}. {query}" for idx, query in enumerate(history)])
    else:
        history_text = "üìù **–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—à—É–∫—É –ø–æ—Ä–æ–∂–Ω—è.**"
    await update.message.reply_text(history_text, parse_mode='Markdown')
    return States.NEWS_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—à—É–∫—É
async def handle_search_performing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.message.text.strip()
    if query:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Ç —É —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ—à—É–∫—É
        if 'search_history' not in context.user_data:
            context.user_data['search_history'] = []
        context.user_data['search_history'].append(query)
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫ –≥–µ—Ä–æ—ó–≤
        matching_heroes = [
            hero["name"] for hero in heroes_data.get('heroes', [])
            if query.lower() in hero["name"].lower()
        ]
        
        if matching_heroes:
            buttons = []
            for i in range(0, len(matching_heroes), 4):
                row = matching_heroes[i:i + 4]
                buttons.append([KeyboardButton(hero) for hero in row])
            buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
            reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
            await update.message.reply_text(f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è '{query}':**", parse_mode='Markdown', reply_markup=reply_markup)
            return States.SEARCH_HERO_GUIDES
        else:
            await update.message.reply_text(f"üîç –ù–µ–º–∞—î –≥–µ—Ä–æ—ó–≤ –∞–±–æ –≥–∞–π–¥—ñ–≤, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å '{query}'.")
            await start(update, context)
            return States.MAIN_MENU
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É.")
        return States.SEARCH_PERFORMING

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –≥–µ—Ä–æ—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É
async def handle_search_hero_guides(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    selected_hero = update.message.text.strip()
    if selected_hero in [hero["name"] for hero in heroes_data.get('heroes', [])]:
        hero_info = get_hero_info(selected_hero)
        if hero_info:
            hero_details = (
                f"üìñ **–î–µ—Ç–∞–ª—ñ –ø—Ä–æ –≥–µ—Ä–æ—è {selected_hero}:**\n\n"
                f"<b>–ö–ª–∞—Å:</b> {hero_info.get('class', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                f"<b>–†–æ–ª—å:</b> {hero_info.get('role', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                f"<b>HP:</b> {hero_info.get('hp', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                f"<b>–ê—Ç–∞–∫–∞:</b> {hero_info.get('attack', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                f"<b>–ó–∞—Ö–∏—Å—Ç:</b> {hero_info.get('defense', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n\n"
                f"üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: {hero_info.get('details_link', '–ù–µ–º–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è')}"
            )
            await update.message.reply_text(hero_details, parse_mode='HTML', disable_web_page_preview=True)
            # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ—à—É–∫—É
            buttons = [
                [KeyboardButton("üîç –ü–æ—à—É–∫ –≥–µ—Ä–æ—ó–≤ —Ç–∞ –≥–∞–π–¥—ñ–≤"), KeyboardButton("üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–∏–π –ø–æ—à—É–∫")],
                [KeyboardButton("üìù –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—à—É–∫—É"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
            ]
            reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
            await update.message.reply_text("üîç –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
            return States.NEWS_MENU
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü—å–æ–≥–æ –≥–µ—Ä–æ—è.")
            return States.NEWS_MENU
    elif selected_hero == "üîô –ù–∞–∑–∞–¥":
        await start(update, context)
        return States.MAIN_MENU
    else:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–±—Ä–∞–Ω–∞ –æ–ø—Ü—ñ—è –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∂–æ–¥–Ω–æ–º—É –≥–µ—Ä–æ—é.")
        await start(update, context)
        return States.MAIN_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥–µ—Ä–æ—è
def get_hero_info(hero_name: str) -> dict:
    return next((hero for hero in heroes_data.get('heroes', []) if hero['name'] == hero_name), None)

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
if __name__ == '__main__':
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ TELEGRAM_BOT_TOKEN –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è.")
        exit(1)
    if not OPENAI_API_KEY:
        logger.error("‚ùå –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ OPENAI_API_KEY –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è.")
        exit(1)

    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è ConversationHandler –∑ —É—Å—ñ–º–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ —Å—Ç–∞–Ω–∞–º–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            States.MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_handler)],
            States.CHARACTERS_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_characters_menu)],
            States.GUIDES_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_guides_menu)],
            States.TOURNAMENTS_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_tournaments_menu)],
            States.UPDATES_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_updates_menu)],
            States.BEGINNER_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_beginner_menu)],
            States.NEWS_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_news_menu),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_search_menu)
            ],
            States.SEARCH_PERFORMING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_search_performing)],
            States.SEARCH_HERO_GUIDES: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_search_hero_guides)],
            States.HELP_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_help_menu)],
            States.QUIZZES_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_quizzes_menu)],
            # –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ —Å—Ç–∞–Ω–∏ —Ç—É—Ç –∑–∞ –ø–æ—Ç—Ä–µ–±–æ—é
        },
        fallbacks=[CommandHandler('start', start)]
    )

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è ConversationHandler –¥–æ –±–æ—Ç–∞
    application.add_handler(conv_handler)

    logger.info("üîÑ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    application.run_polling()
