import os
import asyncio
import random
import logging
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É Telegram API
telegram_bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=telegram_bot_token)

# –í–∞—à chat_id
CHAT_ID = 579063567  # —Ç–≤—ñ–π chat_id

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def bot_send_message(message):
    try:
        await bot.send_message(chat_id=CHAT_ID, text=message)
        logger.info(f"Message sent: {message}")
    except Exception as e:
        logger.error(f"Failed to send message: {e}")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–∏–≥–µ—Ä–Ω–∏—Ö —Å–ª—ñ–≤
def should_respond(message):
    trigger_words = ["–±–æ—Ç", "GPT", "–¥—Ä—É–≥"]
    return any(word in message.lower() for word in trigger_words)

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è
def is_question(message):
    return "?" in message

# –í–∏–ø–∞–¥–∫–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
responses = [
    "–ù—É —â–æ, –¥—Ä—É–∑—ñ, —è–∫ –Ω–∞—Å—Ç—Ä—ñ–π? üòâ",
    "–ß–æ–≥–æ –º–æ–≤—á–∏—Ç–µ, –º–æ–∂–µ –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏?",
    "–ü–∏—Ç–∞–Ω–Ω—è –Ω–µ —Ç–µ—Ä–ø–∏—Ç—å –∑–≤–æ–ª—ñ–∫–∞–Ω—å! –î–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å?",
    "–ó–∞–≤–∂–¥–∏ —Ç—É—Ç, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ—Å—å –ø—ñ–¥–∫–∞–∑–∞—Ç–∏!"
]

def get_personal_response():
    return random.choice(responses)

# –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
last_message_time = None

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—É–∑–∏
async def check_inactivity():
    global last_message_time
    while True:
        if last_message_time and (asyncio.get_event_loop().time() - last_message_time > 180):  # 3 —Ö–≤–∏–ª–∏–Ω–∏ –ø–∞—É–∑–∞
            await bot_send_message("–©–æ —Å–∫–∞–∂–µ—à? –ó–∞–±—É–ª–∏ –ø—Ä–æ –º–µ–Ω–µ? üòâ")
            last_message_time = None
        await asyncio.sleep(10)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥

# –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global last_message_time
    last_message_time = asyncio.get_event_loop().time()
    
    message = update.message.text
    logger.info(f"Received message: {message}")
    
    if should_respond(message):
        response = get_personal_response()
        await bot_send_message(response)
    elif is_question(message) and random.random() > 0.5:  # 50% —à–∞–Ω—Å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        await bot_send_message("–û, –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ñ! –î–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –ª—é–¥–∏?")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def main():
    application = Application.builder().token(telegram_bot_token).build()
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    application.run_polling()

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
if __name__ == "__main__":
    main()
